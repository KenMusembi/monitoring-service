services:
  reverse-proxy:
    image: traefik:v3.3
    command: --api.insecure=true --providers.docker # allowing http connections
    ports:
      - 80:80
      - 8080:8080 # for the traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - web  

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    # adding grafana.localhost as the local dns
    labels:
      - "traefik.http.routers.grafanarouter.rule=Host(`grafana.localhost`)"
    networks:
      - web  

  keycloak:
    image: keycloak/keycloak
    command: start-dev
    container_name: keycloak
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_HTTP_MANAGEMENT_PORT=9000
      #- KC_HTTP_MANAGEMENT_RELATIVE_PATH=/management
    ports:
      - 9000:9000
    #   - 8000:8000
    expose:
      - 9000
    labels:
      - "traefik.http.routers.keycloakrouter.rule=Host(`keycloak.localhost`)"
    networks:
      - web

  backend-service:
    image: monitoring-backend-service:latest
    depends_on:
      - dbservice
    build: ./backend-service
    env_file: ./backend-service/.env  
    container_name: backend-service
    restart: unless-stopped
    ports:
      - 5000:5000
    expose:
      - 5000
    stdin_open: true
    tty: true  
    labels:
      - "traefik.http.routers.backendrouter.rule=Host(`backend.localhost`)"
    networks:
      - web

  dbservice:
    image: postgres:17.2-alpine
    container_name: database-service
    restart: unless-stopped
    expose:
      - 5432
    ports:
      - 5432:5432  
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}       
    networks:
      - web
    volumes:
      - type: bind
        source: ./initialize-database.sh
        target: /docker-entrypoint-initdb.d/initialize-database.sh
      - type: volume
        # source: database-service
        target: /var/lib/postgresql/data  

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    labels:
      - "traefik.http.routers.prometheusrouter.rule=Host(`prometheus.localhost`)"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - web

networks:
  web:
    external: true
    driver: bridge                    